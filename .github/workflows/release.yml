name: Build TEST

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-deb:
    name: Build DEB packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - { name: ubuntu, version: "22.04" }
          - { name: ubuntu, version: "24.04" }
          - { name: debian, version: "11" }
          - { name: debian, version: "12" }
          - { name: debian, version: "13" }
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag or use default
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from tag"
          else
            VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from Cargo.toml"
          fi

      - name: Update debian/changelog with version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/^process-exporter-rust (.*)/process-exporter-rust ($VERSION-1) unstable; urgency=medium/" debian/changelog
          echo "Updated debian/changelog to version $VERSION-1"
          head -n 5 debian/changelog

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rust-src

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            devscripts \
            dpkg-dev \
            build-essential \
            pkg-config \
            libssl-dev \
            clang \
            llvm \
            libelf-dev \
            gcc-multilib \
            linux-headers-generic

      - name: Install bpf-linker
        run: cargo install bpf-linker

      - name: Build eBPF
        run: |
          cd ebpf
          cargo +nightly build --release --target=bpfel-unknown-none -Z build-std=core

      - name: Build application
        run: cargo build --release

      - name: Build DEB package
        run: dpkg-buildpackage -us -uc -b

      - name: Move packages
        run: |
          mkdir -p dist/deb
          # Rename DEB file to include OS info
          for deb in ../*.deb; do
            if [ -f "$deb" ]; then
              # Create new name: process-exporter_0.1.1-1_amd64-ubuntu22.04.deb
              newname="process-exporter_${{ steps.version.outputs.version }}_amd64-${{ matrix.os.name }}${{ matrix.os.version }}.deb"
              mv "$deb" "dist/deb/$newname"
            fi
          done
          mv ../*.buildinfo dist/deb/ 2>/dev/null || true
          mv ../*.changes dist/deb/ 2>/dev/null || true

      - name: Upload DEB packages
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.os.name }}-${{ matrix.os.version }}
          path: dist/deb/*.deb

  build-rpm:
    name: Build RPM packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - { name: rockylinux, version: "9", dist: el9 }
    container:
      image: ${{ matrix.os.name }}:${{ matrix.os.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag or use default
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from tag"
          else
            VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Building version $VERSION from Cargo.toml"
          fi

      - name: Install build tools
        run: |
          dnf install -y git rpm-build rpmdevtools make gcc \
            clang llvm elfutils-libelf-devel kernel-devel

      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly

      - name: Install bpf-linker
        run: |
          source $HOME/.cargo/env
          cargo install bpf-linker

      - name: Build eBPF
        run: |
          source $HOME/.cargo/env
          cd ebpf
          cargo +nightly build --release --target=bpfel-unknown-none -Z build-std=core

      - name: Build application
        run: |
          source $HOME/.cargo/env
          cargo build --release

      - name: Setup rpmbuild directories
        run: mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Copy source files
        run: |
          cp target/release/process-exporter ~/rpmbuild/SOURCES/
          cp scripts/process-exporter.service ~/rpmbuild/SOURCES/
          cp scripts/process-exporter.env ~/rpmbuild/SOURCES/
          cp scripts/install-deps.sh ~/rpmbuild/SOURCES/
          cp README.md ~/rpmbuild/SOURCES/
          if [ ! -f LICENSE ]; then
            echo "MIT License" > ~/rpmbuild/SOURCES/LICENSE
          else
            cp LICENSE ~/rpmbuild/SOURCES/
          fi

      - name: Copy spec file
        run: cp rpm/process-exporter.spec ~/rpmbuild/SPECS/

      - name: Build RPM
        run: |
          rpmbuild --define "_version ${{ steps.version.outputs.version }}" -bb ~/rpmbuild/SPECS/process-exporter.spec

      - name: Copy RPM packages
        run: |
          mkdir -p dist/rpm
          cp ~/rpmbuild/RPMS/*/*.rpm dist/rpm/

      - name: Upload RPM packages
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ matrix.os.name }}-${{ matrix.os.version }}
          path: dist/rpm/*.rpm

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-deb, build-rpm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}