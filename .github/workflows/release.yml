name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binary:
    name: Build Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rust-src

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libelf-dev gcc-multilib

      - name: Install bpf-linker
        run: cargo install bpf-linker

      - name: Build eBPF
        run: |
          cd ebpf
          cargo +nightly build --release --target=bpfel-unknown-none -Z build-std=core

      - name: Build application
        run: cargo build --release

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: process-exporter-binary
          path: target/release/process-exporter

  build-deb:
    name: Build DEB packages
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - { name: ubuntu, version: "22.04", codename: jammy }
          - { name: ubuntu, version: "24.04", codename: noble }
          - { name: debian, version: "11", codename: bullseye }
          - { name: debian, version: "12", codename: bookworm }
    steps:
      - uses: actions/checkout@v4

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: process-exporter-binary
          path: target/release/

      - name: Make binary executable
        run: chmod +x target/release/process-exporter

      - name: Install Rust and build dependencies
        run: |
          chmod +x scripts/install-deps.sh
          sudo ./scripts/install-deps.sh --build

      - name: Install DEB build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts dpkg-dev

      - name: Build DEB package
        run: |
          . $HOME/.cargo/env
          dpkg-buildpackage -us -uc -b

      - name: Move packages
        run: |
          mkdir -p dist/deb
          mv ../*.deb dist/deb/ || true
          mv ../*.buildinfo dist/deb/ || true
          mv ../*.changes dist/deb/ || true

      - name: Upload DEB packages
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.os.name }}-${{ matrix.os.version }}
          path: dist/deb/*.deb

  build-rpm:
    name: Build RPM packages
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - { name: rockylinux, version: "9", dist: el9 }
    container:
      image: ${{ matrix.os.name }}:${{ matrix.os.version }}
    steps:
      - name: Install build tools
        run: |
          dnf install -y git rpm-build rpmdevtools make gcc

      - uses: actions/checkout@v4

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: process-exporter-binary
          path: target/release/

      - name: Make binary executable
        run: chmod +x target/release/process-exporter

      - name: Setup rpmbuild directories
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Copy source files
        run: |
          cp target/release/process-exporter ~/rpmbuild/SOURCES/
          cp scripts/process-exporter.service ~/rpmbuild/SOURCES/
          cp scripts/process-exporter.env ~/rpmbuild/SOURCES/
          cp scripts/install-deps.sh ~/rpmbuild/SOURCES/
          cp README.md ~/rpmbuild/SOURCES/
          
          # Create LICENSE if not exists
          if [ ! -f LICENSE ]; then
            echo "MIT License" > ~/rpmbuild/SOURCES/LICENSE
          else
            cp LICENSE ~/rpmbuild/SOURCES/
          fi

      - name: Copy spec file
        run: cp rpm/process-exporter.spec ~/rpmbuild/SPECS/

      - name: Build RPM
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
          rpmbuild --define "_version $VERSION" \
            -bb ~/rpmbuild/SPECS/process-exporter.spec

      - name: Copy RPM packages
        run: |
          mkdir -p dist/rpm
          cp ~/rpmbuild/RPMS/*/*.rpm dist/rpm/

      - name: Upload RPM packages
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ matrix.os.name }}-${{ matrix.os.version }}
          path: dist/rpm/*.rpm

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-deb, build-rpm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}